// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyDOD5wNNiJpmo9RuIp_2PTcuPcEgtsxetA',
    appId: '1:73669677305:web:6e1130bf485a5ec7ad9228',
    messagingSenderId: '73669677305',
    projectId: 'forall-c5061',
    authDomain: 'forall-c5061.firebaseapp.com',
    storageBucket: 'forall-c5061.firebasestorage.app',
    measurementId: 'G-285F7B5VTE',
  );

  static FirebaseOptions android = FirebaseOptions(
    apiKey: dotenv.env['FIREBASE_API_KEY_ANDROID'] ?? 'YOUR_API_KEY',
    appId: dotenv.env['FIREBASE_APP_ID_ANDROID'] ?? 'YOUR_APP_ID',
    messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID'] ?? 'YOUR_MESSAGING_SENDER_ID',
    projectId: dotenv.env['FIREBASE_PROJECT_ID'] ?? 'YOUR_PROJECT_ID',
    storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET_ANDROID'] ?? 'YOUR_STORAGE_BUCKET',
  );

  static FirebaseOptions ios = FirebaseOptions(
    apiKey: dotenv.env['FIREBASE_API_KEY_IOS'] ?? 'YOUR_API_KEY',
    appId: dotenv.env['FIREBASE_APP_ID_IOS'] ?? 'YOUR_APP_ID',
    messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID'] ?? 'YOUR_MESSAGING_SENDER_ID',
    projectId: dotenv.env['FIREBASE_PROJECT_ID'] ?? 'YOUR_PROJECT_ID',
    storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET_IOS'] ?? 'YOUR_STORAGE_BUCKET',
    iosClientId: dotenv.env['FIREBASE_IOS_CLIENT_ID'] ?? 'YOUR_IOS_CLIENT_ID',
    iosBundleId: dotenv.env['FIREBASE_IOS_BUNDLE_ID'] ?? 'YOUR_IOS_BUNDLE_ID',
  );

  static FirebaseOptions macos = FirebaseOptions(
    apiKey: dotenv.env['FIREBASE_API_KEY_MACOS'] ?? 'YOUR_API_KEY',
    appId: dotenv.env['FIREBASE_APP_ID_MACOS'] ?? 'YOUR_APP_ID',
    messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID'] ?? 'YOUR_MESSAGING_SENDER_ID',
    projectId: dotenv.env['FIREBASE_PROJECT_ID'] ?? 'YOUR_PROJECT_ID',
    storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET_MACOS'] ?? 'YOUR_STORAGE_BUCKET',
    iosClientId: dotenv.env['FIREBASE_IOS_CLIENT_ID_MACOS'] ?? 'YOUR_IOS_CLIENT_ID',
    iosBundleId: dotenv.env['FIREBASE_IOS_BUNDLE_ID_MACOS'] ?? 'YOUR_IOS_BUNDLE_ID',
  );

  static FirebaseOptions windows = FirebaseOptions(
    apiKey: dotenv.env['FIREBASE_API_KEY_WINDOWS'] ?? 'YOUR_API_KEY',
    appId: dotenv.env['FIREBASE_APP_ID_WINDOWS'] ?? 'YOUR_APP_ID',
    messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID'] ?? 'YOUR_MESSAGING_SENDER_ID',
    projectId: dotenv.env['FIREBASE_PROJECT_ID'] ?? 'YOUR_PROJECT_ID',
    authDomain: dotenv.env['FIREBASE_AUTH_DOMAIN_WINDOWS'] ?? 'YOUR_AUTH_DOMAIN',
    storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET_WINDOWS'] ?? 'YOUR_STORAGE_BUCKET',
    measurementId: dotenv.env['FIREBASE_MEASUREMENT_ID_WINDOWS'] ?? 'YOUR_MEASUREMENT_ID',
  );
}
